# 3-say_my_name.txt

===========================
How to Use 3-say_my_name.py
===========================

This module defines a function that prints My name is <first name> <last name> ``say_my_name(first_name, last_name="")``.

Usage
=====

``say_my_name(...)``` returns the full name.
---------------------

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Now test it:

::
    >>> say_my_name("John", "Smith")
    My name is John Smith

The function can receive a parameter followed by a space

::
    >>> say_my_name("John")
    My name is John 

If the function receives an empty string it will read as a space 

::
    >>> say_my_name("", "Carlos")
    My name is  Carlos

    >>> say_my_name("Bob", "")
    My name is Bob 

The show gets some kind of casting str 

::
    >>> say_my_name(str('Hello'), "World")
    My name is Hello World

    >>> say_my_name(str(12), "White")
    My name is 27 School

    >>> say_my_name(str(2.732323244), str(.9))
    My name is 2.732323244 0.9

Types of errors
=====

If you receive two numbers, the error message is for the first_name

::
    >>> say_my_name(434, 332)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(str(2.732323244), int(.9))
    Traceback (most recent call last):
    TypeError: last_name must be a string
    
If the only parameter you receive is None, you will receive an error message

::
    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Hello", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name({"Hello World"}, "White")
    Traceback (most recent call last):
    TypeError: first_name must be a string

If you do not receive any parameters you receive this error message

::
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

The function does not receive any special character with casting str

::
    >>> say_my_name(str(2.732323244), str($$%%))
    Traceback (most recent call last):
    SyntaxError: invalid syntax
